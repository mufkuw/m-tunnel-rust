name: Build and Publish APT Repository (SSH2 Enhanced)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build"
        required: true
        default: "latest"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-packages:
    name: Build Multi-Architecture Packages (SSH2 Enhanced)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
        include:
          - target: x86_64-unknown-linux-gnu
            deb_arch: amd64
          - target: aarch64-unknown-linux-gnu
            deb_arch: arm64
          - target: armv7-unknown-linux-gnueabihf
            deb_arch: armhf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}

      - name: Build for ${{ matrix.target }}
        run: cross build --target ${{ matrix.target }} --release

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create enhanced .deb package (SSH2 ready)
        run: |
          # Use our updated installer script
          chmod +x scripts/installer.sh

          # Extract metadata
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="m-tunnel-rust"
          AUTHOR=$(grep '^authors' Cargo.toml | sed -E 's/authors = \["([^"]*)".*/\1/')
          DESCRIPTION=$(grep '^description' Cargo.toml | sed 's/description = "\(.*\)"/\1/')

          # Create package structure (enhanced for SSH2)
          DEB_DIR="${PACKAGE_NAME}_${VERSION}-1_${{ matrix.deb_arch }}"
          mkdir -p "$DEB_DIR/usr/bin"
          mkdir -p "$DEB_DIR/etc/m-tunnel"
          mkdir -p "$DEB_DIR/etc/m-tunnel/examples"
          mkdir -p "$DEB_DIR/usr/share/doc/m-tunnel"
          mkdir -p "$DEB_DIR/usr/share/m-tunnel/tests"
          mkdir -p "$DEB_DIR/lib/systemd/system"
          mkdir -p "$DEB_DIR/var/log/m-tunnel"
          mkdir -p "$DEB_DIR/DEBIAN"

          # Copy binary (cross-compiled)
          cp "target/${{ matrix.target }}/release/$PACKAGE_NAME" "$DEB_DIR/usr/bin/"

          # Copy configuration files from configs/ directory
          cp "configs/m-tunnel.conf" "$DEB_DIR/etc/m-tunnel/" 2>/dev/null || echo "# Example config" > "$DEB_DIR/etc/m-tunnel/m-tunnel.conf"
          cp ".env" "$DEB_DIR/etc/m-tunnel/" 2>/dev/null || echo "# SSH configuration" > "$DEB_DIR/etc/m-tunnel/.env"
          cp "configs/m-tunnel.key" "$DEB_DIR/etc/m-tunnel/" 2>/dev/null || echo "# SSH private key" > "$DEB_DIR/etc/m-tunnel/m-tunnel.key"

          # Copy example configurations
          cp "configs/m-tunnel.key.example" "$DEB_DIR/etc/m-tunnel/examples/" 2>/dev/null || true
          cp "configs/known_hosts.template" "$DEB_DIR/etc/m-tunnel/examples/" 2>/dev/null || true
          cp "configs/real_ssh_test.toml" "$DEB_DIR/etc/m-tunnel/examples/" 2>/dev/null || true
          cp "config.toml.example" "$DEB_DIR/etc/m-tunnel/examples/" 2>/dev/null || true

          # Copy documentation
          cp "README.md" "$DEB_DIR/usr/share/doc/m-tunnel/" 2>/dev/null || true
          cp docs/*.md "$DEB_DIR/usr/share/doc/m-tunnel/" 2>/dev/null || true

          # Copy test scripts
          cp tests/*.sh "$DEB_DIR/usr/share/m-tunnel/tests/" 2>/dev/null || true
          chmod +x "$DEB_DIR/usr/share/m-tunnel/tests/"*.sh 2>/dev/null || true

          # Set permissions
          chmod 644 "$DEB_DIR/etc/m-tunnel/m-tunnel.conf"
          chmod 600 "$DEB_DIR/etc/m-tunnel/.env"
          chmod 600 "$DEB_DIR/etc/m-tunnel/m-tunnel.key"
          chmod 644 "$DEB_DIR/etc/m-tunnel/examples/"* 2>/dev/null || true

          # Create enhanced systemd service (SSH2 ready)
          cat > "$DEB_DIR/lib/systemd/system/m-tunnel.service" <<EOF
          [Unit]
          Description=$DESCRIPTION (SSH2 Enhanced)
          After=network.target
          Wants=network-online.target
          After=network-online.target

          [Service]
          Type=simple
          ExecStart=/usr/bin/$PACKAGE_NAME --ssh2
          Restart=always
          RestartSec=5
          User=root
          Group=root
          WorkingDirectory=/etc/m-tunnel
          Environment=RUST_LOG=info
          Environment=M_TUNNEL_CONFIG=/etc/m-tunnel/config.toml

          # Enhanced security settings
          NoNewPrivileges=true
          ProtectSystem=strict
          ProtectHome=true
          ReadWritePaths=/var/log/m-tunnel /tmp/ssh-m-tunnel
          PrivateTmp=true
          ProtectKernelTunables=true
          ProtectControlGroups=true
          RestrictRealtime=true

          [Install]
          WantedBy=multi-user.target
          EOF

          # Create enhanced control file
          cat > "$DEB_DIR/DEBIAN/control" <<EOF
          Package: $PACKAGE_NAME
          Version: $VERSION-1
          Section: utils
          Priority: optional
          Architecture: ${{ matrix.deb_arch }}
          Maintainer: $AUTHOR
          Description: $DESCRIPTION
           Enhanced SSH tunnel management utility with native SSH2 library support.
           Features include:
           - Native Rust SSH2 implementation (no external SSH CLI dependency)
           - Multi-tunnel management with TOML configuration
           - Rate limiting and connection throttling
           - Comprehensive security features
           - Async performance with Tokio runtime
           - Both CLI and library-based SSH implementations
           .
           Configuration files organized in /etc/m-tunnel/ following Linux FHS standards.
           Documentation and examples included in /usr/share/doc/m-tunnel/.
           Test scripts available in /usr/share/m-tunnel/tests/.
           Built for ${{ matrix.deb_arch }} architecture with SSH2 enhancements.
          Depends: libc6
          EOF

          # Create enhanced postinst script (SSH2 ready)
          cat > "$DEB_DIR/DEBIAN/postinst" <<'EOF'
          #!/bin/bash
          set -e

          echo "🚀 M-Tunnel SSH2 Enhanced - Post Installation"
          echo "============================================="

          # Create dedicated user for security
          if ! id "m-tunnel" &>/dev/null; then
              useradd -r -s /bin/false -d /etc/m-tunnel -c "M-Tunnel Service User" m-tunnel
              echo "✅ Created m-tunnel user"
          fi

          # Create and secure directories
          mkdir -p /var/log/m-tunnel
          mkdir -p /etc/m-tunnel
          mkdir -p /tmp/ssh-m-tunnel
          touch /etc/m-tunnel/known_hosts

          # Set proper ownership and permissions
          chown -R m-tunnel:m-tunnel /etc/m-tunnel
          chown -R m-tunnel:m-tunnel /var/log/m-tunnel
          chown m-tunnel:m-tunnel /tmp/ssh-m-tunnel

          # Secure permissions
          chmod 750 /etc/m-tunnel
          chmod 750 /var/log/m-tunnel
          chmod 700 /tmp/ssh-m-tunnel
          chmod 644 /etc/m-tunnel/m-tunnel.conf 2>/dev/null || true
          chmod 600 /etc/m-tunnel/.env 2>/dev/null || true
          chmod 600 /etc/m-tunnel/m-tunnel.key 2>/dev/null || true
          chmod 644 /etc/m-tunnel/known_hosts

          # Reload systemd and enable service
          systemctl daemon-reload
          systemctl enable m-tunnel.service

          echo ""
          echo "🎉 M-Tunnel Installation Complete!"
          echo "=================================="
          echo "📁 Configuration: /etc/m-tunnel/"
          echo "📚 Documentation: /usr/share/doc/m-tunnel/"
          echo "🧪 Tests: /usr/share/m-tunnel/tests/"
          echo "🚀 SSH2 support enabled by default"
          echo "🔧 Start: systemctl start m-tunnel.service"
          EOF

          chmod 755 "$DEB_DIR/DEBIAN/postinst"

          # Build package
          dpkg-deb --build "$DEB_DIR"

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages-${{ matrix.deb_arch }}
          path: "*.deb"

  publish-repository:
    name: Publish APT Repository
    needs: build-packages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all packages
        uses: actions/download-artifact@v3
        with:
          path: packages/

      - name: Setup GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign --detach --armor /dev/null || true

      - name: Create APT repository
        run: |
          # Setup repository structure
          mkdir -p apt-repo/{pool,dists}

          # Copy packages to pool
          find packages/ -name "*.deb" -exec cp {} apt-repo/pool/ \;

          # Generate repository metadata
          cd apt-repo
          dpkg-scanpackages pool /dev/null > dists/Packages
          gzip -9c dists/Packages > dists/Packages.gz

          # Create Release file
          cat > dists/Release <<EOF
          Origin: M-Tunnel Repository
          Label: M-Tunnel
          Architectures: amd64 arm64 armhf
          Components: main
          Description: M-Tunnel SSH tunneling utility
          Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')
          EOF

          # Add checksums
          echo "MD5Sum:" >> dists/Release
          find dists -name "Packages*" -exec md5sum {} \; | sed 's|dists/||' >> dists/Release
          echo "SHA1:" >> dists/Release
          find dists -name "Packages*" -exec sha1sum {} \; | sed 's|dists/||' >> dists/Release
          echo "SHA256:" >> dists/Release  
          find dists -name "Packages*" -exec sha256sum {} \; | sed 's|dists/||' >> dists/Release

          # Sign Release file
          gpg --default-key "${{ secrets.GPG_KEY_ID }}" --armor --detach-sign --output dists/Release.gpg dists/Release
          gpg --default-key "${{ secrets.GPG_KEY_ID }}" --clear-sign --output dists/InRelease dists/Release

          # Export public key
          gpg --armor --export "${{ secrets.GPG_KEY_ID }}" > gpg-key.asc

      - name: Create GitHub Pages content
        run: |
          # Create pages directory
          mkdir -p pages-content
          cp -r apt-repo/* pages-content/

          # Repository URL
          REPO_URL="https://$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | cut -d'/' -f1).github.io/$(echo "${{ github.repository }}" | cut -d'/' -f2)"

          # Create enhanced index.html
          cat > pages-content/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>M-Tunnel APT Repository</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; background: #f8f9fa; }
                  .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #007acc; }
                  .logo { font-size: 2.5em; margin-bottom: 10px; color: #007acc; }
                  .install-box { background: #f1f3f4; border: 1px solid #dadce0; border-radius: 6px; padding: 20px; margin: 20px 0; font-family: 'Courier New', monospace; }
                  .install-command { background: #2d3748; color: #e2e8f0; padding: 15px; border-radius: 6px; margin: 10px 0; overflow-x: auto; }
                  .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }
                  .feature { padding: 20px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #007acc; }
                  .badge { display: inline-block; background: #007acc; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8em; margin: 5px 5px 5px 0; }
                  .stats { text-align: center; margin: 30px 0; padding: 20px; background: #e8f4fd; border-radius: 6px; }
                  a { color: #007acc; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <div class="logo">🚇 M-Tunnel</div>
                      <h1>APT Repository</h1>
                      <p>Professional SSH tunneling utility for Linux systems</p>
                  </div>
                  <div class="stats">
                      <h3>📊 Repository Status</h3>
                      <span class="badge">✅ Active</span>
                      <span class="badge">🔒 GPG Signed</span>
                      <span class="badge">🏗️ Multi-Arch</span>
                      <span class="badge">⚡ Auto-Updated</span>
                  </div>
                  <h2>🚀 Quick Installation</h2>
                  <div class="install-box">
                      <strong>One-liner installation:</strong>
                      <div class="install-command">curl -fsSL REPO_URL_PLACEHOLDER/install.sh | sudo bash</div>
                  </div>
                  <h2>📦 Manual Installation</h2>
                  <div class="install-box">
                      <strong>Add repository manually:</strong>
                      <div class="install-command"># Add GPG key
          curl -fsSL REPO_URL_PLACEHOLDER/gpg-key.asc | sudo apt-key add -

          # Add repository  
          echo "deb REPO_URL_PLACEHOLDER/apt stable main" | sudo tee /etc/apt/sources.list.d/m-tunnel.list

          # Install package
          sudo apt update
          sudo apt install m-tunnel-rust</div>
                  </div>
                  <h2>✨ Features</h2>
                  <div class="features">
                      <div class="feature">
                          <h3>🔒 Enhanced Security</h3>
                          <p>Strict SSH host verification, dedicated service user, and systemd security hardening</p>
                      </div>
                      <div class="feature">
                          <h3>⚡ High Performance</h3>
                          <p>Arc-based memory management, connection multiplexing, and intelligent reconnection</p>
                      </div>
                      <div class="feature">
                          <h3>🔄 Auto-Reconnection</h3>
                          <p>Automatic reconnection with exponential backoff and connection monitoring</p>
                      </div>
                      <div class="feature">
                          <h3>🏗️ Multi-Architecture</h3>
                          <p>Native support for amd64, arm64, and armhf architectures</p>
                      </div>
                  </div>
                  <h2>📚 Documentation</h2>
                  <ul>
                      <li><a href="https://github.com/${{ github.repository }}/blob/master/README.md">Installation Guide</a></li>
                      <li><a href="https://github.com/${{ github.repository }}/blob/master/APT-REPOSITORY.md">Repository Documentation</a></li>
                      <li><a href="https://github.com/${{ github.repository }}/issues">Report Issues</a></li>
                  </ul>
                  <h2>🏷️ Available Packages</h2>
                  <div class="install-box">
                      <strong>m-tunnel-rust</strong> - SSH tunnel management utility
                      <br><small>Architectures: amd64, arm64, armhf</small>
                  </div>
                  <footer style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #dadce0; color: #666;">
                      <p>Powered by GitHub Pages • <a href="https://github.com/${{ github.repository }}">Source Code</a> • Built with ❤️</p>
                  </footer>
              </div>
          </body>
          </html>
          EOF

          # Replace placeholder with actual URL
          sed -i "s|REPO_URL_PLACEHOLDER|$REPO_URL|g" pages-content/index.html

          # Create install script
          cat > pages-content/install.sh << 'EOF'
          #!/bin/bash
          # M-Tunnel APT Repository Installer

          set -e

          echo "🚇 Installing M-Tunnel APT Repository"
          echo "====================================="

          # Check if running as root
          if [ "$EUID" -ne 0 ]; then
              echo "❌ Error: This script must be run as root (use sudo)"
              exit 1
          fi

          # Repository URL
          REPO_URL="REPO_URL_PLACEHOLDER"

          echo "📍 Repository URL: $REPO_URL"

          # Add GPG key
          echo "🔑 Adding GPG key..."
          if command -v apt-key >/dev/null 2>&1; then
              curl -fsSL "$REPO_URL/gpg-key.asc" | apt-key add -
              KEYRING_OPTION=""
          else
              # For newer systems that don't support apt-key
              curl -fsSL "$REPO_URL/gpg-key.asc" | gpg --dearmor -o /usr/share/keyrings/m-tunnel.gpg
              KEYRING_OPTION="[signed-by=/usr/share/keyrings/m-tunnel.gpg]"
          fi

          # Add repository
          echo "📦 Adding repository..."
          echo "deb ${KEYRING_OPTION} $REPO_URL/apt stable main" > /etc/apt/sources.list.d/m-tunnel.list

          # Update package list
          echo "🔄 Updating package list..."
          apt update

          echo "✅ M-Tunnel repository added successfully!"
          echo ""
          echo "🚀 Install M-Tunnel with:"
          echo "   sudo apt install m-tunnel-rust"
          echo ""
          echo "📚 Documentation:"
          echo "   https://github.com/${{ github.repository }}"
          EOF

          # Replace placeholder in install script
          sed -i "s|REPO_URL_PLACEHOLDER|$REPO_URL|g" pages-content/install.sh
          chmod +x pages-content/install.sh

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages-content
          publish_branch: gh-pages

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: packages/**/*.deb
          generate_release_notes: true
